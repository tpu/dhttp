Модуль dhttp это API (http, https и WebSocket) сервера для node.js
Плюс встроеный шаблонизатор j2h с набором внутренних переменных 
для обработки динамических шаблонов а так же отдачи статики( Статических шаблонов, Картинок, иконок и т.д ) . 


[ ------------------------------------------------------------------------------------------]

Пример использования: ( server.js )

//Подключаем модуль.

var dhttp = require('./dhttp').dhttp;
var ws = require('./dhttp').ws

//server configuration - конфиг сервера
var config = {
 //server type [ http || https] - Тип создаваемого сервера 
 type: 'http', 
 //https configuration - Опции TLS(SSL)
 https: {key: '/var/node/cert/nodejskey.pem', cert: '/var/node/cert/nodejscert.pem'},
 //listening port - Порт
 port:  8090,
 //root directory - Корневая директория без завершающего слеша
 root: 'c:/node/Seo',
 //index file - Имя файла который будет обработан если в URL передана только директория и/или директория и параметры
 index : 'index.htm',
 //error file - Файл будет обработан при 404 ошибке
 errFile:'err.htm',
 //show error message[ true || false] - отображать или нет ошибки в шаблоне
 showErr: true,
 //lock files - заблокированые файлы при их запросе будет сгенерирована 404 ошибка
 noRun: ['node', 'admin.js', 'j2h/*', 'test/*', 'dhttp.js', 'server.js'],
 //character set - Кодировка
 charset: 'utf8',
 //WebSockets config
 wsconfig: { proto: 'chat' },
}

var main = {
  sesion: 0,
  test: 0,
}
var sockets = []; 

//Функция создания сервера
//параметры:
//( Обьект конфигурации, Пользовательский обьект для передачи в шаблон, КаллБэк функция обработки запросов  )
//параметры КаллБэк:
//( query - разобраная строка запроса, path - путь в запросе, Обьект request, Обьект Response, Служебный обьект)
var on = dhttp.createServer(config, main, function( query, path, req, res, app ){  

//app.get( find, type[path or query], anonymous function ) 
//app.write( path to file or empty(automatic) )

//AJAX
   app.get( /dhttp/i, 'q',  function(){
	  res.writeHead( 200 );
	  res.end( JSON.stringify( { hello: ' hello dhttp server'} ) );
    } );

//WebSockets
    app.get( /^\/ws$/i, 'p', function(){
	 sockets.push( res );
	 setInterval(function(){
	    res.write( ws.ping() );
	 }, 30000);
 
   res.on('data', function(mess){
	if( ws.getDataType( mess )  == 10 ){
	    console.log( 'pong ответ от ' + res.remoteAddress );}
        if( ws.getDataType( mess )  == 9 ){
	    console.log( 'ping запрос от ' + res.remoteAddress );
        res.write( ws.pong() );
	}
	if(ws.getDataType( mess ) == 1 ){
	  for( var i = 0; i < sockets.length; i++ ){
	   	                        \\( data, fin, opcode, masked )            
              sockets[i].write( ws.addData( ws.getData(mess), true, 1, false) )
	  } 
     }	
    });
     res.on('close', function(){
       console.log('socket index '+ sockets.indexOf( res ) +' close');
	   sockets.splice( sockets.indexOf( res ), 1 );
     });
   });

//write file
    app.get( /test$/, 'p',  function(){
        app.write('c:/node/Seo/test.txt' )
    });   

//response html, template, js, css, binary 
    app.get( /^\//, 'p',  function(){
	     app.write( );
    } );	
});

console.log( on ? 'server:8090': 'error');

[ --------------------------------------------------------------------- ]
Встроеный шаблонизатор

Статические файлы ( картинки, flash, иконки и т.д )
Обрабатываються и отдаються клиенту автоматически 
основной фаил шаблона берется из config.index
Остальные файлы динамических или статических шаблонов так же будут обработаны
автоматически по запросу, при условии их нахождении на сервере.

Пример оснавного шаблона приложения: файл( index.htm )

Для вставки кода используется <? ?> php тип, если нужно что то другое нужно поправить в j2h.js
В шаблоне доступны глобальные переменные.

$get - url query string - разобранная строка запроса
$var - global variables in template  - переменные видны во всем шаблоне
$cookie - cookies - разобранный набор печенек
$header - 
$setHeader - variables to set http headers - принипает загаловки http
$console - function console.log - 
$() - function echo - Функция вывода контента 


<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" >
<script language="javascript" src="jquery-1.6.2.js"></script>

<!-- Работа с сервером через WS и Ajax-->
<script language="javascript">
$(document).ready(function(){
 if(!window.WebSocket)alert('don"WebSocket');
 $('#ws').click(function(){
   var sock = new WebSocket('ws://192.168.0.111:8090/ws', 'chat');
   sock.onopen = function(event){
     $('#wsstate').attr('value', 'socket open');
     $('#wssend').removeAttr('disabled');
     $('#wssend').click(function(){ sock.send( $('#wsmess').attr('value') ); });
   }
   sock.onmessage = function(mess){
     //alert(mess.data.toString());
     $('#mess').append(mess.data.toString()+'\r\n');
   }
   sock.onclose = function(event){
    $('#wsstate').attr('value', 'socket close');
   }
   sock.onerror = function(err){
    console.log('ws error '+err.data);
   }
  
 }); 
});
 
$(document).ready(function(){
 $('#a').click(function(){
  $.ajax({
   type: 'GET',
   url: 'index.htm',
   data: 'dhttp=j2h',
   dataType: 'json',
   success: function(msg){alert(msg.hello.toString());}
  });
 });
});
</script>
</head>

<!-- Выводим заголовок с помощю $() -->
<title><?$('dhttp server')?></title>
<body align="center" id="body">

<!-- Картинка будет отдана клиенту автоматически -->
<img src="dhttp.png" />

<!-- set cookie - Установка Кука -->
<? if($cookie.user == undefined){ $setHeader['set-cookie'] = 'user=user'+sesion; sesion++;}?>

<!-- set global template variable - $var.i будет доступна в любом месте шаблона
в отличии от локальных переменных в нутри вставки кода -->
<? $var.i = 'this is j2h template';?>

<!-- set local variavle end concat global + local 
     Вывод контента локальная переменная вставки + глобальная переменная шаблона
-->
<p><? var i = 'runing with dhttp node.js module'; 
      $($var.i +' '+ i)
   ?>
</p>

<a href="http://192.168.0.245:85/?user=dhttp">press to read query variable</a>

<!-- print url param - Вывод параметра запрошенного URL -->
<p>GET Variables <?$($get.user != undefined ? $get.user : '')?></p>

<!-- print user param - Вывод параметра из пользовательского обьекта переданного в шаблон -->
<p>User Variables <?$(path)?></p>

<!-- print cookies - Вывод Куки -->
<p>Cookie Variables <?$($cookie.user != undefined ? $cookie.user : '')?></p>

<a href="#" id="a">press to read ajax variable</a>

<input type="button" value="ws connect" id="ws" />
 <input type="text" value="socket state" id="wsstate" /><br /><br />
 <textarea rows="5" cols="45" id="mess"/></textarea><br />
 <input type="button" value="send" id="wssend" />
 <input type="text" value="" id="wsmess" />
</body>
</html>
  
